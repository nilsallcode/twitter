datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  // @db.Text
  access_token       String?  // @db.Text
  expires_at         Int?
  refresh_token_expires_in Int? // @db.Text
  token_type         String?
  scope              String?
  id_token           String?  // @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  following     Follow[] @relation("following")
  followed      Follow[] @relation("followed")
  posts         Post[]
  likes         Like[]
  replies       Reply[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Follow {
  id            String    @id @default(cuid())
  following     User @relation("following", references: [id], fields: [followingId], onDelete: Cascade)
  followingId   String
  followed      User @relation("followed", references: [id], fields: [followedId], onDelete: Cascade)
  followedId    String
}

model Post {
  id            String    @id @default(cuid())
  user          User @relation(references: [id], fields: [userId])
  userId        String
  content       String
  created_at    DateTime @default(now())
  likes         Like[]
  replies       Reply[]
}

model Like {
  id String @id @default(cuid())
  post Post @relation(references: [id], fields: [postId], onDelete: Cascade)
  postId String
  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId String
}

model Reply {
  id String @id @default(cuid())
  post Post @relation(references: [id], fields: [postId], onDelete: Cascade)
  postId String
  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId String
  content String
  created_at DateTime @default(now())
}